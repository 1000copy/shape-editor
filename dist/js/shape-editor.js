//! Built on 2015-06-10
//! GPL License. www.openmicroscopy.org

//!  DO NOT EDIT THIS FILE! - Edit under src/js/*.js

/* globals Raphael: false */
/* globals console: false */

var Line = function Line() {


};


var CreateLine = function CreateLine(options) {

	this.paper = options.paper;
	this.manager = options.manager;
};

CreateLine.prototype.startDrag = function startDrag() {

	console.log('CreateLine.startDrag', this, arguments);
	this.line = new Line();
};

/* globals Raphael: false */
/* globals CreateLine: false */
/* globals console: false */

var ShapeManager = function ShapeManager(elementId, width, height, options) {

    var self = this;
    this.STATES = ["SELECT", "RECT", "LINE", "ARROW", "ELLIPSE"];
    // Set up Raphael paper...
    this.paper = Raphael(elementId, width, height);

    // Store all the shapes we create
    this.shapes = [];

    // Add a full-size background to cover existing shapes while
    // we're creating new shapes, to stop them being selected.
    // Mouse events on this will bubble up to svg and are handled below
    this.newShapeBg = this.paper.rect(0, 0, width, height);
    this.newShapeBg.attr({'fill':'#000',
                          'fill-opacity':0.01,
                          'cursor': 'crosshair'});
    this.newShapeBg.drag(this.drag,
        function(){
            self.startDrag.apply(self, arguments);
        },
        this.stopDrag);

    this.createShape = new CreateLine({'shapeManager': this, 'paper': this.paper});
};


ShapeManager.prototype.startDrag = function startDrag(){
    console.log('startDrag', this, arguments);
    // clear any existing selected shapes
    // this.deselectShapes()
    // create a new shape using the current toolbar color
    this.createShape.startDrag(arguments);

};

ShapeManager.prototype.drag = function drag(){
    console.log('drag', this, arguments);
};

ShapeManager.prototype.stopDrag = function stopDrag(){
    console.log('stopDrag', this, arguments);
};


ShapeManager.prototype.setState = function setState(state) {
    if (this.STATES.indexOf(state) === -1) {
        console.log("Invalid state: ", state, "Needs to be in", this.STATES);
        return;
    }
    // When creating shapes, cover existing shapes with newShapeBg
    var shapes = ["RECT", "LINE", "ARROW", "ELLIPSE"];
    if (shapes.indexOf(state) > -1) {
        this.newShapeBg.show().toFront();
    } else {
        this.newShapeBg.hide();
    }
    this.state = state;
};

ShapeManager.prototype.getState = function getState() {
    return this.state;
};
